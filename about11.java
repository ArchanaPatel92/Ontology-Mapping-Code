//package project;


import java.awt.Desktop;
import java.io.IOException;
import java.net.URI;
import java.util.logging.Level;
import java.util.logging.Logger;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author LAB
 */
public class about11 extends javax.swing.JPanel {

    /**
     * Creates new form about1
     */
    public about11() {
        initComponents();
       String ref = "<html> <u> Archana Patel and Sarika Jain, \"Formalisms of Representing Knowledge\", Elsevier Procedia Computer Science, Scopus Indexed, ISSN: 1877-0509, 2018 </u> </html>";
       jLabel9.setText(ref);  
       
      String ref1 = "<html> <u> Sarika Jain, Sonia Mehla, and Sanju Mishra, \"An ontology of Natural Disasters with exceptions.\" System Modeling & Advancement in Research Trends (SMART), International Conference. IEEE, 2016 </u> </html>";
       jLabel6.setText(ref1);
      
      String ref2 = "<html> <u> Sarika Jain, Chhavi Gupta and Amit Bhardwaj , \"Research Directions under the Parasol of Ontology Based Semantic Web Structure/”, Advances in Intelligent Systems and Computing (AISC), vol 614, pp 644-655, 2017. </u> </html>";
      jLabel8.setText(ref2); 
      String ref3 = "<html> <u> Archana Patel, Abhisek Sharma and Sarika Jain, \"An Intelligent Resource Manager over Terrorism Knowledge Base/”, Recent Patents on Computer Science, Bentham Science, Jan 2019, ISSN: 1874-4796 (Online),  Scopus Indexed. </u> </html>";
      jLabel20.setText(ref3); 
      
      String ref4 = "<html> <u> Sonia Mehla and Sarika Jain, \"Development and Evaluation of Knowledge Treasure for Emergency Situation Awareness\", International Journal of Computers and Applications, Taylor and Francis, Jan 2019, 1925-7074 (Online). (Scopus Indexed) </u> </html>";
      jLabel22.setText(ref4);
      
      
      String ref5 = "<html> <u> Archana Patel and Sarika Jain, \"Present and Future of Semantic Web Technologies: A Research Statement\", International Journal of Computers and Applications, Taylor and Francis, Jan 2019, 1925-7074 (Online). (Scopus Indexed) </u> </html>";
      jLabel24.setText(ref5);
      
       
      String ref6 = "<html> <u> Sanju Mishra and Sarika Jain, “Ontologies as a Semantic Model in IoT”, International Journal of Computers and Applications, Taylor and Francis, Aug 2018, ISSN: 1206-212X (Print), 1925-7074 (Online). (Scopus Indexed).\n" +" </u> </html>";
      jLabel26.setText(ref6);
    
      String ref7 = "<html> <u> Sarika Jain, Sonia Mehla and Apoorv Gaurav Agarwa, “An Ontology based Earthquake Recommendation System”, Communications in Computer and Information Science (CCIS), vol 955, pp. 331-340, Springer, 2018,(Scopus Indexed). </u> </html>";
      jLabel30.setText(ref7);
      
       String ref8 = "<html> <u> Archana Patel and Sarika Jain, All the guidelines of the description logic, First International Science Conference in Indian Languages, NIT Kurukshetra, 22nd Aug 2017, pp: 96-97. </u> </html>";
      jLabel34.setText(ref8);
    
      String ref9 = "<html> <u> Sonia Mehla and Sarika Jain, Survey on Rule Languages for Reasoning, First International Science Conference in Indian Languages, NIT Kurukshetra, 22nd Aug 2017, pp: 36-37 </u> </html>";
      jLabel36.setText(ref9);
     
      String ref10 = "<html> <u> Sarika Jain and Valerie Meyer, \"Evaluation and Refinement of Emergency Situation Ontology\", 7th International Conference on Educational and Information Technology (ICEIT 2019), 7-9 March 2018, Oxford, UK </u> </html>";
      jLabel38.setText(ref10);
      
      String ref11 = "<html> <u> Archana Patel and Sarika Jain, “A Partition Based Framework for large Scale Ontology Matching\", Recent Patents on Engineering, Bentham Science, 2019, Vol.13(1), ISSN:2212-4047, Scopus Indexed </u> </html>";
      jLabel40.setText(ref11);
      
    
      
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane6 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextArea4 = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea3 = new javax.swing.JTextArea();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTextArea5 = new javax.swing.JTextArea();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        jTextArea6 = new javax.swing.JTextArea();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jScrollPane8 = new javax.swing.JScrollPane();
        jTextArea7 = new javax.swing.JTextArea();
        jLabel14 = new javax.swing.JLabel();
        jScrollPane9 = new javax.swing.JScrollPane();
        jTextArea8 = new javax.swing.JTextArea();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jScrollPane10 = new javax.swing.JScrollPane();
        jTextArea9 = new javax.swing.JTextArea();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jScrollPane11 = new javax.swing.JScrollPane();
        jTextArea10 = new javax.swing.JTextArea();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jScrollPane12 = new javax.swing.JScrollPane();
        jTextArea11 = new javax.swing.JTextArea();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jScrollPane13 = new javax.swing.JScrollPane();
        jTextArea12 = new javax.swing.JTextArea();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jScrollPane14 = new javax.swing.JScrollPane();
        jTextArea13 = new javax.swing.JTextArea();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jScrollPane15 = new javax.swing.JScrollPane();
        jTextArea14 = new javax.swing.JTextArea();
        jLabel28 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        jScrollPane16 = new javax.swing.JScrollPane();
        jTextArea15 = new javax.swing.JTextArea();
        jLabel30 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        jScrollPane17 = new javax.swing.JScrollPane();
        jTextArea16 = new javax.swing.JTextArea();
        jLabel32 = new javax.swing.JLabel();
        jLabel33 = new javax.swing.JLabel();
        jScrollPane18 = new javax.swing.JScrollPane();
        jTextArea17 = new javax.swing.JTextArea();
        jLabel34 = new javax.swing.JLabel();
        jLabel35 = new javax.swing.JLabel();
        jScrollPane19 = new javax.swing.JScrollPane();
        jTextArea18 = new javax.swing.JTextArea();
        jLabel36 = new javax.swing.JLabel();
        jLabel37 = new javax.swing.JLabel();
        jScrollPane20 = new javax.swing.JScrollPane();
        jTextArea19 = new javax.swing.JTextArea();
        jLabel38 = new javax.swing.JLabel();
        jLabel39 = new javax.swing.JLabel();
        jScrollPane21 = new javax.swing.JScrollPane();
        jTextArea20 = new javax.swing.JTextArea();
        jLabel40 = new javax.swing.JLabel();
        jLabel41 = new javax.swing.JLabel();
        jScrollPane22 = new javax.swing.JScrollPane();
        jTextArea21 = new javax.swing.JTextArea();
        jLabel42 = new javax.swing.JLabel();
        jLabel43 = new javax.swing.JLabel();
        jLabel44 = new javax.swing.JLabel();
        jLabel45 = new javax.swing.JLabel();
        jLabel46 = new javax.swing.JLabel();
        jLabel47 = new javax.swing.JLabel();
        jLabel48 = new javax.swing.JLabel();
        jLabel49 = new javax.swing.JLabel();
        jLabel50 = new javax.swing.JLabel();

        jPanel1.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel1.setText("MISSION");

        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jTextArea1.setBorder(null);
        jTextArea1.setPreferredSize(new java.awt.Dimension(0, 0));
        jScrollPane1.setViewportView(jTextArea1);

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel2.setText("SCOPE");

        jTextArea2.setColumns(20);
        jTextArea2.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jTextArea2.setRows(5);
        jScrollPane2.setViewportView(jTextArea2);

        jLabel3.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel3.setText("PUBLICATIONS");

        jTextArea4.setColumns(20);
        jTextArea4.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jTextArea4.setText(" Incomplete, imprecise and large volume of data generates the concept of knowledge base. Knowledge base which is collection of facts, procedures and meaning is much better than database because it \n provides the power of reasoning, with the help of which the complicated questions are solved. Knowledge representation is a method to encode knowledge,beliefs, action, feeling, goals, desires, preferences\n and all other mental states in the Knowledge base. Semantic web defines standards for exchanging knowledge via coherent knowledge base. To develop a good knowledge base it is necessary to have good\n knowledge representation. For this reason, knowledge representation is our main consideration. This paper gives an overview on knowledge representation aspects in the context of semantic web.");
        jTextArea4.setPreferredSize(new java.awt.Dimension(0, 0));
        jScrollPane4.setViewportView(jTextArea4);

        jLabel4.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel4.setText("1.");

        jLabel5.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel5.setText("2.");

        jLabel6.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jLabel6.setText("Sarika Jain, Sonia Mehla, and Sanju Mishra, \"An ontology of Natural Disasters with exceptions.\" System Modeling & Advancement in Research Trends (SMART), International Conference. IEEE, 2016.");
        jLabel6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel6MouseClicked(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jLabel8.setText("Sarika Jain, Chhavi Gupta and Amit Bhardwaj , \"Research Directions under the Parasol of Ontology Based Semantic Web Structure”, Advances in Intelligent Systems and Computing (AISC), vol 614, pp 644-655, 2017.");
        jLabel8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel8MouseClicked(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jLabel9.setText("Archana Patel and Sarika Jain, \"Formalisms of Representing Knowledge\", Elsevier Procedia Computer Science, Scopus Indexed, ISSN: 1877-0509, 2018");
        jLabel9.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel9MouseClicked(evt);
            }
        });

        jTextArea3.setColumns(20);
        jTextArea3.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jTextArea3.setPreferredSize(new java.awt.Dimension(0, 0));
        jScrollPane3.setViewportView(jTextArea3);

        jTextArea5.setColumns(20);
        jTextArea5.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jTextArea5.setRows(5);
        jTextArea5.setText(" The Semantic Web which is an extended version of the current web not only takes into consideration the current possibilities and capabilities of the www (World Wide Web) but also bestow standard \n structure for the data representation and reasoning over it. The domain is open and extensible where data is given the highest priority in terms of its meaning and to be understood by machines to process \n and engender results. Its potential is yet to be discovered and explored to its fullest capability since traditional structure has still serious challenge in terms of data processing and modeling, information  \n accessing, data sharing, its representation and reusability across various assorted applications and endeavor. This paper discusses the potential research directions in the domain of Semantic Web in terms\n of the knowledge representation, storage and querying that can bring marvel to the world of web and can bring a technology that can revolutionize the entire web experience.");
        jScrollPane5.setViewportView(jTextArea5);

        jLabel7.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel7.setText("3.");

        jTextArea6.setColumns(20);
        jTextArea6.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jTextArea6.setText(" This work focuses mainly on developing a knowledge treasure in order to provide an accurate and concise view of the situations that may occur during emergencies. It is developed to be aware of situations \n and provide real time decision support to make recovery from incidents with the help of available resources. A knowledge treasure consists of a knowledge base of concepts(i.e., a domain ontology), and a \n database of instances. We have specified the ontology terms through rigorous interviews, reviewing the existing ontologies and answering the competency questions. The ontology has been formalized in \n owl and implemented using Protégé 5.1.");
        jTextArea6.setPreferredSize(new java.awt.Dimension(0, 0));
        jScrollPane7.setViewportView(jTextArea6);

        jLabel10.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jLabel10.setText("Sonia Mehla and Sarika. Jain, \"A Knowledge Treasure for Situation Awareness during Emergencies”, International Conference on Smart Technologies in Computer and Communication (SmartTech-2017), 27-29 March 2017, in press");

        jLabel11.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel11.setText("4.");

        jLabel12.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel12.setText("5.");

        jLabel13.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jLabel13.setText("Sanju Mishra and Sarika Jain, “Towards a Semantic Knowledge Treasure for Military Intelligence”, Advances in Intelligent Systems and Computing (AISC) Series, Scopus Indexed, 2018");

        jTextArea7.setColumns(20);
        jTextArea7.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jTextArea7.setText(" Information integration is essentially important for military operations because the range of relevant information sources is significantly distinct and dynamic. This work aims to develop a semantic knowledge\n treasure comprising of military resource ontology and procedures, as a model for better interoperability of heterogeneous resources of Indian Military. This model can automatically interpret and govern the \n context of military information, thereby facilitating the military commanders with decision making in several operations, such as command and control, weapon selection, situation awareness and many more. \n To design the military resource ontology, we specify the core concepts of the ontology based on terms extracted from heterogeneous resources. We develop an intelligent tool “QueryOnto” as an interface to\n the military resource ontology that provides a commander’s decision support service and demonstrates how to use the military ontology in practice. Web Ontology Language (OWL) and SPARQL query are \n used to implement the complete task.");
        jTextArea7.setPreferredSize(new java.awt.Dimension(0, 0));
        jScrollPane8.setViewportView(jTextArea7);

        jLabel14.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel14.setText("6.");

        jTextArea8.setColumns(20);
        jTextArea8.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jTextArea8.setText("A domain independent conceptual model that aims to be highly reusable across specific domain applications is provided by Upper level ontologies which usually describe abstract concepts. In this paper we\n proposed Sup_Ont, a fundamental upper ontology. In this ontology the structure of universe shows the concept of reality that is defined to have an existence which is known as truth. The devised super \nontology and hence the domain ontologies can be reused across applications because of the generalized representation scheme used that is an EHCPR. An Extended Hierarchical Censored Production Rules \n(EHCPRs) system is a knowledge representation system for reasoning with real life problems and a step towards a generalized representation system. An EHCPR is a unit of knowledge resulting in a \nknowledge base which shows modularity and hierarchy. Extended Hierarchical Censored Production Rules (EHCPRs) have been used to represent the knowledge in intelligent systems.");
        jTextArea8.setPreferredSize(new java.awt.Dimension(0, 0));
        jScrollPane9.setViewportView(jTextArea8);

        jLabel15.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jLabel15.setText("Sonia Mehla and Sarika Jain,\" Advances in Intelligent Systems and Computing (AISC) Series\", Advances in Intelligent Systems and Computing (AISC) Series, Scopus Indexed, 2018");

        jLabel16.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jLabel16.setText("Sanju Mishra and Sarika Jain, \"An Intelligent Knowledge Treasure for Military Decision Support\", International Journal of Web-Based Learning and Teaching Technologies (IJWLTT), IGI Global, ISSN: 1548-1093, Accepted. (Scopus Indexed)");

        jLabel17.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel17.setText("7.");

        jTextArea9.setColumns(20);
        jTextArea9.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jTextArea9.setText(" Ontology plays a major role in Semantic Web to describe the meaning about data on the web. Some inferences can be gleaned from the ontology model itself, but others may not be expressible in the ontology\n language (usually OWL) and require a more functional representation. Semantic Rules are required to infer implicit inference. It is a way of expressing additional things that can be inferred from your dataset. \n Rules layer is on top of the OWL in semantic web layered architecture. This layer is less developed and active area of research. Various Rule languages have been developed by the authors for the Semantic\n web such as RuleML (Rule Markup Language), SWRL (Semantic Web Rule Language), RIF (Rule Interchange Format), R2ML (REWERSE Rule Markup Language) and many more. This paper aims to \n discuss the state-of-the-art with respect to semantic rule-based technologies. It gives an overview of the rules and rule languages that are currently available to support rule based and ontology-based \n reasoning, and it also reviews some of the limitations of these technologies in terms of their inability to deal with uncertain or imprecise data, incomplete knowledge, decidability and their poor performance in\n some reasoning contexts.");
        jTextArea9.setPreferredSize(new java.awt.Dimension(0, 0));
        jScrollPane10.setViewportView(jTextArea9);

        jLabel18.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jLabel18.setText("Sonika Malik and Sarika Jain, “Sup_Ont: An Upper Ontology”, International Journal of Web-Based Learning and Teaching Technologies, IGI Global, Jan 2019, ISSN: 1548-1093. Accepted. Scopus Indexed");

        jLabel19.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel19.setText("8.");

        jTextArea10.setColumns(20);
        jTextArea10.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jTextArea10.setText("Information integration is essentially great for military operations because the range of pertinent information sources is significantly distinct and dynamic. This work aims to develop an intelligent knowledge \ntreasure comprising of military resource ontology and procedures, as a learning model for better interoperability of heterogeneous resources of Indian Military. This model can interpret and learn the context \nof military information automatically, thereby facilitating the military commanders with decision making in several operations, such as command and control, teaching and training, military coalition, situation \nawareness and many more. To design the military resource ontology, we specify the core concepts of the ontology based on terms derived from heterogeneous resources. WWW standard ontology language, \nOWL has been used to codify the ontology. We develop an intelligent tool “QueryOnto” as an interface to the military resource ontology that provides a commander’s decision support service and demonstrates\n how to apply the military ontology in practice. The developed ontology has been verified and validated with the best known approaches and metrics available. The presented model is helpful for military \ncommanders to train their juniors in a systematic way and will provide an efficient web-based learning of different military tasks in future.");
        jTextArea10.setPreferredSize(new java.awt.Dimension(0, 0));
        jScrollPane11.setViewportView(jTextArea10);

        jLabel20.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jLabel20.setText("Archana Patel, Abhisek Sharma and Sarika Jain, \"An Intelligent Resource Manager over Terrorism Knowledge Base”, Recent Patents on Computer Science, Bentham Science, Jan 2019, ISSN: 1874-4796 (Online),  Scopus Indexed.");
        jLabel20.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel20MouseClicked(evt);
            }
        });

        jLabel21.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel21.setText("9.");

        jTextArea11.setColumns(20);
        jTextArea11.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jTextArea11.setText("Large amount of data coming from different sources and formats is available on the web which generates heterogeneity problem. Semantic web technologies play an important role for collecting, merging,\n matching and aggregating big data from heterogeneous resources by determining the semantic correspondence between the entities. However, the correct, precise and complete identification of semantic \ncorrespondences is difficult to achieve with large scale ontologies because it requires huge space and involves time complexity. Thus achieving good efficiency is major challenge for large scale ontology \nmatching task. In this paper, we propose a partition based approach for large scale ontology matching after reviewing various state of the art publications and patents. Our proposal first selects the source \nontology and calculates the similarity of concepts within source ontology by using Lin measure. We use clustering algorithm for partition of the source ontology, obtained clusters of source ontology then \nused to divide the target ontology. During matching process, we run matchers from the pool of the matchers over each clusters. We aggregate the result of element level matchers and structure level matchers\n according to weighted sum aggregation.  Each cluster is executed in its processor in parallel with other clusters. The combination of clustering algorithm and parallel processing reduces the memory space \nand time complexity of matching process. We show the performance of our proposal with the results provided by OAEI conference in bibliographic benchmark and large biomedical track.");
        jTextArea11.setPreferredSize(new java.awt.Dimension(0, 0));
        jScrollPane12.setViewportView(jTextArea11);

        jLabel22.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jLabel22.setText("Sonia Mehla and Sarika Jain, \"Development and Evaluation of Knowledge Treasure for Emergency Situation Awareness\", International Journal of Computers and Applications, Taylor and Francis, Jan 2019, 1925-7074 (Online). (Scopus Indexed)");
        jLabel22.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel22MouseClicked(evt);
            }
        });

        jLabel23.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel23.setText("10.");

        jTextArea12.setColumns(20);
        jTextArea12.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jTextArea12.setText("The complex and chaotic crisis created by terrorism demands for situation awareness which is possible with the proposed Indian Terrorism Knowledge Treasure (ITKT). Objective: This work is an effort at \ncreating the largest comprehensive knowledge base of terrorism and related activities, people and agencies involved, and extremist movements; and providing a platform to the society, the government and the \nmilitary personnel in order to combat the evolving threat of the global menace terrorism. Method: For representing knowledge of the domain semantically, an ontology has been used in order to better integrate \ndata and information from multiple heterogeneous sources. An Indian Terrorism Knowledge Base is created consisting of information about past terrorist attacks, actions taken at time of those attacks, \navailable resources and more. An Indian Terrorism Resource Manager is conceived comprising of various use cases catering to searching a specified keyword for its description, navigating the complete \nknowledge base of Indian Terrorism and finding any answers to any type of queries pertaining to terrorism. Results: The managerial implications of this work are twofold. All the involved parties, i.e., the \ngovernment officials, military, police, emergency personnel, fire department, NGOs, media, public etc will be better informed in case of emergency and will be able to communicate with each other; hence \nimproving situation awareness and providing decision support.");
        jTextArea12.setPreferredSize(new java.awt.Dimension(0, 0));
        jScrollPane13.setViewportView(jTextArea12);

        jLabel24.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jLabel24.setText("Archana Patel and Sarika Jain, \"Present and Future of Semantic Web Technologies: A Research Statement\", International Journal of Computers and Applications, Taylor and Francis, Jan 2019, 1925-7074 (Online). (Scopus Indexed)");
        jLabel24.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel24MouseClicked(evt);
            }
        });

        jLabel25.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel25.setText("11.");

        jTextArea13.setColumns(20);
        jTextArea13.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jTextArea13.setText("In this work, we have developed a knowledge treasure for situation awareness. Background knowledge and information for emergency situations are required to support the decision makers. Our main motive\nis to provide real-time decision support to make recovery from incidents with the help of available resources. A knowledge treasure consists of a knowledge base of concepts (i.e. a domain ontology), \ndatabase of instances and required procedures and rules for different use cases. Web ontology language (OWL) is used to construct the ontology in protégé 5.2 editor. In this paper, we followed the proper \nmethodology to develop and evaluate the ontology for emergency situation management. A review of several approaches has been done to evaluate the ontology. Two major evaluation approaches have been \napplied on the ontology to evaluate it quantitatively and qualitatively and compared the results with other existing ontology.");
        jTextArea13.setPreferredSize(new java.awt.Dimension(0, 0));
        jScrollPane14.setViewportView(jTextArea13);

        jLabel26.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jLabel26.setText("Sanju Mishra and Sarika Jain, “Ontologies as a Semantic Model in IoT”, International Journal of Computers and Applications, Taylor and Francis, Aug 2018, ISSN: 1206-212X (Print), 1925-7074 (Online). (Scopus Indexed).");
        jLabel26.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel26MouseClicked(evt);
            }
        });

        jLabel27.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel27.setText("12.");

        jTextArea14.setColumns(20);
        jTextArea14.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jTextArea14.setText("Semantic web and its technologies have been eyed in many fields. They have the capacity to organize and link data over the web in a consistent and coherent way. Semantic web technologies consist of RDF\nschema, OWL, and rule and query languages like SPARQL and these technologies will help the various domains to resolve their problems. This review paper starts with analyzing the nature of semantic web \nand its requirements. We have considered all 10 domains which are closely related to semantic web and its technologies. For a better understanding of the paper, we have separated it into three major\ncontributions. First, we analyze semantic web and those domains that increase the growth of the semantic web. Second, we discuss all domains where semantic web technologies play a vital role. Third, we\nemphasize those domains that go hand in hand with semantic web technologies. This review paper will be utilized as an unbiased direction for the researchers.");
        jTextArea14.setPreferredSize(new java.awt.Dimension(0, 0));
        jScrollPane15.setViewportView(jTextArea14);

        jLabel28.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jLabel28.setText("Sonia Mehla, Sarika Jain (Feb 2018), \"Rule Languages for the Semantic Web\", Advances in Intelligent Systems and Computing (AISC), Springer Cham. Print ISBN: 978-3- 319-60617-0, Online ISBN: 978-3-319-60618-7. (Scopus Indexed).");

        jLabel29.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel29.setText("13.");

        jTextArea15.setColumns(20);
        jTextArea15.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jTextArea15.setText("The world is witnessing an increasing use of IoT-based devices to collect sensor data in order to perceive the real world and generate abstractions. This data is highly heterogeneous in nature as it is obtained \nfrom various domains utilizing different representation schemes. Semantic approaches come as a rescue to this interoperability problem incurred because of heterogeneous sensor data from IoT devices. The \ndata thus obtained should be represented in form of ontologies which are considered as the cornerstone of the Semantic Web for knowledge sharing, information extraction, information integration and many \nmore. The content and the quality of the ontologies should be analyzed by evaluating them to ensure that the ontology is well designed, structured, and contains all essential concepts and relationships between\nthem for efficient reasoning. This paper focuses on the evaluation of ontologies and, as a case study, evaluates a Military Resource Ontology (MRO) by using evaluation tools such as OntoMetric, OOPs!,\nONTOCOM, based on evaluation approaches, aspects and criteria. These tools detect errors by diagnosing various metrics and pitfalls. Evaluation methods are grouped in two phases: verification and \nvalidation. In this paper, ‘QueryOnto’ tool is introduced to verify and validate the MRO by searching, query/answering, and visualizing.");
        jTextArea15.setPreferredSize(new java.awt.Dimension(0, 0));
        jScrollPane16.setViewportView(jTextArea15);

        jLabel30.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jLabel30.setText("Sarika Jain, Sonia Mehla and Apoorv Gaurav Agarwa, “An Ontology based Earthquake Recommendation System”, Communications in Computer and Information Science (CCIS), vol 955, pp. 331-340, Springer, 2018,(Scopus Indexed).");
        jLabel30.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel30MouseClicked(evt);
            }
        });

        jLabel31.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel31.setText("14.");

        jTextArea16.setColumns(20);
        jTextArea16.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jTextArea16.setText("According to geographical statistics, 54% of the land in India is vulnerable to earthquakes, and several populous regions fall under Zone 4 or 5 in levels of seismicity. It is believed that a comprehensive \nearthquake recommendation system will significantly reduce the number of emergency services that are dispensed when disaster strikes and will also effectively minimize casualties. Various techniques have\nbeen employed to successively create such a recommendation system which provides efficiency in managing the dispensing of the emergency services. The paper focuses on determining the immediate \ncourse of action that should be taken during emergencies like earthquake to mitigate the damages to life and property using Ontology supported rule-based reasoning and case-based reasoning, i.e. the actions\nare determined using similar cases from the past, if any, and validated through existing rules and experience.");
        jTextArea16.setPreferredSize(new java.awt.Dimension(0, 0));
        jScrollPane17.setViewportView(jTextArea16);

        jLabel32.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jLabel32.setText("Chhavi Gupta, Amit Bhardwaj, Sanju Tiwari and Sarika Jain, “A Semantic Web Portal for Unconventional Emergencies”, 8th International Conference on Computing, Communication and Networking Technologies, 2017, pp: 1-4. ");

        jLabel33.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel33.setText("15.");

        jTextArea17.setColumns(20);
        jTextArea17.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jTextArea17.setText("Ontology plays a major role in Semantic Web to describe the meaning about data on the web. Some inferences can be gleaned from the ontology model itself, but others may not be expressible in the ontology \nlanguage (usually OWL) and require a more functional representation. Semantic Rules are required to infer implicit inference. It is away of expressing additional things that can be inferred from your dataset. \nRules layer is on top of the OWL in semantic web-layered architecture. This layer is less developed and active area of research. Various Rule languages have been developed by the authors for the Semantic \nweb such as RuleML (Rule Markup language), SWRL (SemanticWeb Rule Language), RIF (Rule Interchange Format), R2ML (REWERSE Rule Markup Language) and many more. This paper aims to \ndiscuss the state of the art with respect to semantic rule-based technologies. It gives an overview of the rules and rule languages that are currently available to support rulebased- and ontology-based reasoning,\nand it also reviews some of the limitations of these technologies in terms of their inability to deal with uncertain or imprecise data, incomplete knowledge, decidability and their poor performance in some \nreasoning contexts.");
        jTextArea17.setPreferredSize(new java.awt.Dimension(0, 0));
        jScrollPane18.setViewportView(jTextArea17);

        jLabel34.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jLabel34.setText("Archana Patel and Sarika Jain, All the guidelines of the description logic, First International Science Conference in Indian Languages, NIT Kurukshetra, 22nd Aug 2017, pp: 96-97.");
        jLabel34.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel34MouseClicked(evt);
            }
        });

        jLabel35.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel35.setText("16.");

        jTextArea18.setColumns(20);
        jTextArea18.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jTextArea18.setText("The Semantic Web is the web of today. It puts semantic web documents on www and has become a universal medium for the exchange of information. But it suffers from lack of effective interfaces for\nend users hindering its wide adoption. A Semantic Web portal offers information access of a specific domain and uses the standard web technologies like HTML, XML, JSP etc. along with the semantic web\ntechnologies like OWL and RDF. BrowseUE is a semantic web portal that will bestow the features such as visualization, navigation, querying and search for any domain whose knowledge base is put into it. \nWe have implemented the BrowseUE portal and system validation is done using actual ontological data.");
        jTextArea18.setPreferredSize(new java.awt.Dimension(0, 0));
        jScrollPane19.setViewportView(jTextArea18);

        jLabel36.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jLabel36.setText("Sonia Mehla and Sarika Jain, Survey on Rule Languages for Reasoning, First International Science Conference in Indian Languages, NIT Kurukshetra, 22nd Aug 2017, pp: 36-37");
        jLabel36.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel36MouseClicked(evt);
            }
        });

        jLabel37.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel37.setText("17.");

        jTextArea19.setColumns(20);
        jTextArea19.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jTextArea19.setText("Description logics (DL) are very famous logic based representation formalism with a lot of various applications. Mostly DLs are decidable pieces of first order logics and they are equipped with a formal \nsemantics such as an accurate specification of the meaning of DL ontologies. With the help of this semantics, computer systems and clients exchange DL ontologies without any ambiguity and redundancy, \nit also allows applying the logical deduction to extract meaningful information from the ontology. There are various applications which are based on DL such as KL- ONE (the first prototypical language),\nKrypton (introduced A-box and T-box), Classic (attempted to maximized tractability), Loom, GRAIL (developed for representation Galen terminology), OWL (web ontology language). DLs are capable of \nfetching accurate information from the knowledge base and represent it in well defined format. In this paper, I will describe the entire knowledge of DL and its research directions which provide an unbiased \nguide for the researcher.");
        jTextArea19.setPreferredSize(new java.awt.Dimension(0, 0));
        jScrollPane20.setViewportView(jTextArea19);

        jLabel38.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jLabel38.setText("Sarika Jain and Valerie Meyer, \"Evaluation and Refinement of Emergency Situation Ontology\", 7th International Conference on Educational and Information Technology (ICEIT 2019), 7-9 March 2018, Oxford, UK");
        jLabel38.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel38MouseClicked(evt);
            }
        });

        jLabel39.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel39.setText("18.");

        jTextArea20.setColumns(20);
        jTextArea20.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jTextArea20.setText("Ontology plays a major role in Semantic Web to describe the meaning about data on the web. Some inferences can be gleaned from the ontology model itself, but others may not be expressible in the ontology \nlanguage (usually OWL) and require a more functional representation. Semantic Rules are required to infer implicit inference. It is a way of expressing additional things that can be inferred from your dataset. \nIn the layered architecture of semantic web, Rules layer is on top of the OWL. This layer is less developed and active area of research. Various Rule languages have been developed by authors for the \nSemantic web such as RuleML (Rule Markup Language), SWRL (Semantic Web Rule Language), RIF (Rule Interchange Format), R2ML (REWERSE Rule Markup Language) and many more. Aim of this \npaper is make comparative study of these languages. Some of the comparison parameter includes imprecise, uncertainty, handling incomplete knowledge, rules priorities, and decidability.");
        jTextArea20.setPreferredSize(new java.awt.Dimension(0, 0));
        jScrollPane21.setViewportView(jTextArea20);

        jLabel40.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jLabel40.setText("Archana Patel and Sarika Jain, “A Partition Based Framework for large Scale Ontology Matching\", Recent Patents on Engineering, Bentham Science, 2019, Vol.13(1), ISSN:2212-4047, Scopus Indexed");
        jLabel40.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel40MouseClicked(evt);
            }
        });

        jLabel41.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel41.setText("19.");

        jTextArea21.setColumns(20);
        jTextArea21.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jTextArea21.setText("Ontologies provide a machine-processable description of entities and their properties, relationships and constraints, thus they can depict the semantics of disaster situations and related emergency tasks and\nthereby help to create connections between them for an efficient emergency response. As an ontology acts as the basic structure and knowledge base of an application, evaluation and assessment of the \nontology are a critical point of the development process. Through the evaluation, the quality and the content of the ontology is assessed and it ensures that the ontology is well built, structured and contains all \nimportant concepts and relationships between them for sufficient reasoning. In this paper, an evaluation framework is proposed to evaluate an emergency situation ontology for which existing evaluation \nmethods have been combined into a single framework, dividing the methods used into two phases: verification and validation. The verification of the ontology ensures that the ontology is correctly built. It \nevaluates the structure, functionality and representation of the ontology. Different metrics and common pitfalls are used to detect errors. The validation of the ontology ensures that the right ontology for the \ngiven application is built. This is achieved by competency questions and expert interviews.");
        jTextArea21.setPreferredSize(new java.awt.Dimension(0, 0));
        jScrollPane22.setViewportView(jTextArea21);

        jLabel42.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel42.setText("Under Review");

        jLabel43.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jLabel43.setText("Sonia Mehla, Sarika Jain, \"An Ontology Supported Hybrid Approach for Recommendation in Emergency Situations”, Artificial Intelligence Review, Under Review");

        jLabel44.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel44.setText("20.");

        jLabel45.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jLabel45.setText("Sarika Jain, Sonia Mehla, Jan Wagner, \"Ontology Supported Inference of Knowledge for Emergency Situations\" International Journal of Web-Based Learning and Teaching Technologies (IJWLTT), IGI Global");

        jLabel46.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel46.setText("21.");

        jLabel47.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jLabel47.setText("Archana Patel and Sarika Jain, \"Data of Semantic Web as Unit of Knowledge\", Journal of Web Engineering, SCI");

        jLabel48.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel48.setText("22.");

        jLabel49.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jLabel49.setText("Sarika Jain, Umesh and Archana Patel, \"“Non-Monotonic Reasoning For Scenario Awareness over Emergency Knowledge Base”, Scopus");

        jLabel50.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel50.setText("23.");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane11)
                            .addComponent(jScrollPane10)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(22, 22, 22)
                                .addComponent(jLabel22, javax.swing.GroupLayout.DEFAULT_SIZE, 1186, Short.MAX_VALUE)
                                .addGap(53, 53, 53))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 1183, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel23)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel25)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jLabel24, javax.swing.GroupLayout.PREFERRED_SIZE, 1145, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel27)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel26, javax.swing.GroupLayout.PREFERRED_SIZE, 1145, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jScrollPane14, javax.swing.GroupLayout.PREFERRED_SIZE, 1183, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane18, javax.swing.GroupLayout.PREFERRED_SIZE, 1183, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                            .addComponent(jLabel4)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 981, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                            .addComponent(jLabel5)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 1064, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                            .addComponent(jLabel7)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 1118, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                            .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 883, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                            .addComponent(jLabel12)
                                            .addGap(18, 18, 18)
                                            .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 926, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(jScrollPane8, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 1183, Short.MAX_VALUE)
                                        .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jScrollPane7, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jScrollPane5, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                            .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 927, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel16))))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(4, 4, 4)
                                .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 1000, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(7, 7, 7)
                                .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 1130, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jScrollPane15, javax.swing.GroupLayout.PREFERRED_SIZE, 1183, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel29)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel30, javax.swing.GroupLayout.PREFERRED_SIZE, 1145, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jScrollPane16, javax.swing.GroupLayout.PREFERRED_SIZE, 1183, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel31)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel28, javax.swing.GroupLayout.PREFERRED_SIZE, 1145, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jScrollPane17, javax.swing.GroupLayout.PREFERRED_SIZE, 1183, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel33)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel32, javax.swing.GroupLayout.PREFERRED_SIZE, 1145, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(15, 15, 15)
                                .addComponent(jLabel35)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel34, javax.swing.GroupLayout.PREFERRED_SIZE, 1038, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jScrollPane19, javax.swing.GroupLayout.PREFERRED_SIZE, 1183, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addComponent(jLabel37)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel36, javax.swing.GroupLayout.PREFERRED_SIZE, 1038, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jScrollPane20, javax.swing.GroupLayout.PREFERRED_SIZE, 1183, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jScrollPane12, javax.swing.GroupLayout.PREFERRED_SIZE, 1183, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addComponent(jLabel39)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel38, javax.swing.GroupLayout.PREFERRED_SIZE, 1038, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jScrollPane21, javax.swing.GroupLayout.PREFERRED_SIZE, 1183, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(11, 11, 11)
                                .addComponent(jLabel41)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel40, javax.swing.GroupLayout.PREFERRED_SIZE, 1038, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jScrollPane22, javax.swing.GroupLayout.PREFERRED_SIZE, 1183, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel46)
                                    .addComponent(jLabel44))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel43, javax.swing.GroupLayout.PREFERRED_SIZE, 1038, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel45, javax.swing.GroupLayout.PREFERRED_SIZE, 1038, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jScrollPane13, javax.swing.GroupLayout.PREFERRED_SIZE, 1183, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel48)
                                    .addComponent(jLabel50))
                                .addGap(17, 17, 17)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel47, javax.swing.GroupLayout.PREFERRED_SIZE, 1038, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel49, javax.swing.GroupLayout.PREFERRED_SIZE, 1038, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel42, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(jLabel13))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18)
                    .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel20)
                    .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane13, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane14, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel24, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel25, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane15, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel26, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel27, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane16, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel29, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel30, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14)
                .addComponent(jScrollPane17, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel28, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel31, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(13, 13, 13)
                .addComponent(jScrollPane18, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel32, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel33, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23)
                .addComponent(jScrollPane19, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel34, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel35, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane20, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel36, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel37, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(13, 13, 13)
                .addComponent(jScrollPane21, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel38, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel39, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane22, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel41, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel40, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane12, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22)
                .addComponent(jLabel42, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel43, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel44, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel45, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel46, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel47, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel48, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel49, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel50, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(406, Short.MAX_VALUE))
        );

        jScrollPane6.setViewportView(jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 1227, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 20, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 763, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(2664, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jLabel9MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel9MouseClicked
        // TODO add your handling code here:
        try{

            if (Desktop.isDesktopSupported()){
                Desktop desktop = Desktop.getDesktop();
                if (desktop.isSupported(Desktop.Action.BROWSE)){
                    desktop.browse(new URI("https://www.sciencedirect.com/science/article/pii/S187705091732834X"));
                }
            }
        }
        catch (Exception e){
            e.printStackTrace();
        }
    }//GEN-LAST:event_jLabel9MouseClicked

    private void jLabel8MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel8MouseClicked

        // TODO add your handling code here:
        try{

            if (Desktop.isDesktopSupported()){
                Desktop desktop = Desktop.getDesktop();
                if (desktop.isSupported(Desktop.Action.BROWSE)){
                    desktop.browse(new URI("https://link.springer.com/chapter/10.1007/978-3-319-60618-7_63"));
                }
            }
        }
        catch (Exception e){
            e.printStackTrace();
        }

    }//GEN-LAST:event_jLabel8MouseClicked

    private void jLabel6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel6MouseClicked

        // TODO add your handling code here:
        try{

            if (Desktop.isDesktopSupported()){
                Desktop desktop = Desktop.getDesktop();
                if (desktop.isSupported(Desktop.Action.BROWSE)){
                    desktop.browse(new URI("http://ieeexplore.ieee.org/document/7894526/"));
                }
            }
        }
        catch (Exception e){
            e.printStackTrace();
        }

    }//GEN-LAST:event_jLabel6MouseClicked

    private void jLabel20MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel20MouseClicked

       // TODO add your handling code here:
        
      try{

            if (Desktop.isDesktopSupported()){
                Desktop desktop = Desktop.getDesktop();
                if (desktop.isSupported(Desktop.Action.BROWSE)){
                    desktop.browse(new URI("http://www.eurekaselect.com/168913"));
                }
            }
        }
        catch (Exception e){
            e.printStackTrace();
        }  
        
        
        
    }//GEN-LAST:event_jLabel20MouseClicked

    private void jLabel22MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel22MouseClicked
        // TODO add your handling code here:
         
      try{

            if (Desktop.isDesktopSupported()){
                Desktop desktop = Desktop.getDesktop();
                if (desktop.isSupported(Desktop.Action.BROWSE)){
                    desktop.browse(new URI("https://www.tandfonline.com/doi/abs/10.1080/1206212X.2019.1574950?journalCode=tjca20"));
                }
            }
        }
        catch (Exception e){
            e.printStackTrace();
        }    
        
    }//GEN-LAST:event_jLabel22MouseClicked

    private void jLabel24MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel24MouseClicked
        // TODO add your handling code here:
      try{

            if (Desktop.isDesktopSupported()){
                Desktop desktop = Desktop.getDesktop();
                if (desktop.isSupported(Desktop.Action.BROWSE)){
                    desktop.browse(new URI("https://www.tandfonline.com/doi/abs/10.1080/1206212X.2019.1570666?journalCode=tjca20"));
                }
            }
        }
        catch (Exception e){
            e.printStackTrace();
        }     
        
        
    }//GEN-LAST:event_jLabel24MouseClicked

    private void jLabel26MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel26MouseClicked
        // TODO add your handling code here:
          // TODO add your handling code here:
      try{

            if (Desktop.isDesktopSupported()){
                Desktop desktop = Desktop.getDesktop();
                if (desktop.isSupported(Desktop.Action.BROWSE)){
                    desktop.browse(new URI("https://www.tandfonline.com/doi/abs/10.1080/1206212X.2018.1504461?journalCode=tjca20"));
                }
            }
        }
        catch (Exception e){
            e.printStackTrace();
        }    
        
        
    }//GEN-LAST:event_jLabel26MouseClicked

    private void jLabel30MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel30MouseClicked
        // TODO add your handling code here:
     try{

            if (Desktop.isDesktopSupported()){
                Desktop desktop = Desktop.getDesktop();
                if (desktop.isSupported(Desktop.Action.BROWSE)){
                    desktop.browse(new URI("https://link.springer.com/chapter/10.1007/978-981-13-3140-4_30"));
                }
            }
        }
        catch (Exception e){
            e.printStackTrace();
        }   
        
        
    }//GEN-LAST:event_jLabel30MouseClicked

    private void jLabel34MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel34MouseClicked
        // TODO add your handling code here:
        
      try{

            if (Desktop.isDesktopSupported()){
                Desktop desktop = Desktop.getDesktop();
                if (desktop.isSupported(Desktop.Action.BROWSE)){
                    desktop.browse(new URI("https://sites.google.com/vigyanprakash.org/karyavaahi2017/%E0%A4%B8%E0%A4%B0-39?authuser=0"));
                }
            }
        }
        catch (Exception e){
            e.printStackTrace();
        }    
        
    }//GEN-LAST:event_jLabel34MouseClicked

    private void jLabel36MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel36MouseClicked
   // TODO add your handling code here:
        
     try{

            if (Desktop.isDesktopSupported()){
                Desktop desktop = Desktop.getDesktop();
                if (desktop.isSupported(Desktop.Action.BROWSE)){
                    desktop.browse(new URI("https://sites.google.com/vigyanprakash.org/karyavaahi2017/%E0%A4%B8%E0%A4%B0-15?authuser=0"));
                }
            }
        }
        catch (Exception e){
            e.printStackTrace();
        }     
        
    }//GEN-LAST:event_jLabel36MouseClicked

    private void jLabel38MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel38MouseClicked
        // TODO add your handling code here:
    try{

            if (Desktop.isDesktopSupported()){
                Desktop desktop = Desktop.getDesktop();
                if (desktop.isSupported(Desktop.Action.BROWSE)){
                    desktop.browse(new URI("http://www.ijiet.org/vol8/1127-T09.pdf"));
                }
            }
        }
        catch (Exception e){
            e.printStackTrace();
        }         
        
        
    }//GEN-LAST:event_jLabel38MouseClicked

    private void jLabel40MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel40MouseClicked

       // TODO add your handling code here:
        
     try{

            if (Desktop.isDesktopSupported()){
                Desktop desktop = Desktop.getDesktop();
                if (desktop.isSupported(Desktop.Action.BROWSE)){
                    desktop.browse(new URI("http://www.eurekaselect.com/169864/article"));
                }
            }
        }
        catch (Exception e){
            e.printStackTrace();
        }     
        
    }//GEN-LAST:event_jLabel40MouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel49;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel50;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane13;
    private javax.swing.JScrollPane jScrollPane14;
    private javax.swing.JScrollPane jScrollPane15;
    private javax.swing.JScrollPane jScrollPane16;
    private javax.swing.JScrollPane jScrollPane17;
    private javax.swing.JScrollPane jScrollPane18;
    private javax.swing.JScrollPane jScrollPane19;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane20;
    private javax.swing.JScrollPane jScrollPane21;
    private javax.swing.JScrollPane jScrollPane22;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea10;
    private javax.swing.JTextArea jTextArea11;
    private javax.swing.JTextArea jTextArea12;
    private javax.swing.JTextArea jTextArea13;
    private javax.swing.JTextArea jTextArea14;
    private javax.swing.JTextArea jTextArea15;
    private javax.swing.JTextArea jTextArea16;
    private javax.swing.JTextArea jTextArea17;
    private javax.swing.JTextArea jTextArea18;
    private javax.swing.JTextArea jTextArea19;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextArea jTextArea20;
    private javax.swing.JTextArea jTextArea21;
    private javax.swing.JTextArea jTextArea3;
    private javax.swing.JTextArea jTextArea4;
    private javax.swing.JTextArea jTextArea5;
    private javax.swing.JTextArea jTextArea6;
    private javax.swing.JTextArea jTextArea7;
    private javax.swing.JTextArea jTextArea8;
    private javax.swing.JTextArea jTextArea9;
    // End of variables declaration//GEN-END:variables
}
